from ..Script import Script
import random

# current bugs
# Two post processors wont run at the same time. Probably a Cura Issue

# Current Version contains
# Support for 2-4 extruders
# Initial Flow for raft or anything before affected layers
# First part of modifiers so future options can be added easier (needs work)
# Modifiers Part 1. base_input - allowing it to be easier to add a wood texture modifier and heart beat modifier
# Modifiers Part 2. change_rate - allowing random distances between changes for wood texture
# Fixed duplicate 0:1:0, 0:1:0:0, and 0:0:1:0 showing up
# Abandoned Overflow until able to prove its useful
# Re-enabled the initiate_extruder function

# Next features
# Allow user to chose what color to end print with after adjusted layers are complete (make sure doesnt overlap last adjustment)
# Add Heartbeat modifier
# Enable ability to wrap the shift back to the beginning nozzle with user input circular or linear

# Credits for contributions
# gargansa, bass4aj


# Convenience function for gargansa's coding familiarity
def clamp(value, minimum, maximum):
    return max(minimum, min(value, maximum))


# Function to compile the initial setup into a string
def initiate_extruder(existing_gcode, *ext):
    qty_ext = len(ext)
    setup_line = ";Modified by ColorShift" + "\n"
    setup_line += existing_gcode + " Modified:\n"
    # Define tool
    for i in range(0, qty_ext):
        if i == 0:
            setup_line += "M563 P0 D" + str(i)
        else:
            setup_line += ":" + str(i)
    setup_line += " H1 ;Define tool 0" + "\n"
    # Position tool
    #for i in range(0, qty_ext):
    #    setup_line += "M563 P" + str(i + 1) + " D" + str(i) + " H1"
    #    setup_line += " ;Position " + str(i + 1) + " tool" + "\n"
    # Set axis offsets
    setup_line += "G10 P0 X0 Y0 Z0 ;Set tool 0 axis offsets" + "\n"
    # Activate tool
    setup_line += "G10 P0 R120 S220 ;Set initial tool 0 active"
    # Set initial extrusion rate
    setup_line += adjust_extruder_rate("", *ext)
    # Initiate the tool
    setup_line += "M568 P0 S1 ;Turn on tool mixing for the extruder" + "\n"
    return setup_line


# Function to compile extruder info into a string
def adjust_extruder_rate(existing_gcode, *ext):
    i = 0
    for item in ext:
        if i == 0:
            setup_line = existing_gcode + "  \nM567 P0 E" + str(item)
        else:
            setup_line += ":" + str(item)
        i += 1
    setup_line += "\n"
    return setup_line


# Just used to output info to text file to help debug
def print_debug(report_data):
    setup_line = ";Debug " + str(report_data) + "\n"
    return setup_line


class ColorShift(Script):
    version = "2.0.0"

    def __init__(self):
        super().__init__()

    def getSettingDataString(self):
        return """{
            "name":"ColorShift",
            "key":"ColorShift",
            "metadata": {},
            "version": 2,
            "settings":
            {
                "qty_extruders":
                {
                    "label": "Number of extruders",
                    "description": "How many extruders in mixing nozzle.",
                    "type": "enum",
                    "options": {"2":"Two","3":"Three","4":"Four"},
                    "default_value": "2"
                },
                "a_trigger":
                {
                    "label": "Shifting Clamp Type",
                    "description": "Begin and end shifting at percentage or layer.",
                    "type": "enum",
                    "options": {"percent":"Percentage","layer_no":"Layer No."},
                    "default_value": "percent"
                },
                "percent_change_start":
                {
                    "label": "Extrusion % Start",
                    "description": "Percentage of layer height to start shifting extruder percentage.",
                    "unit": "%",
                    "type": "float",
                    "default_value": 0,
                    "minimum_value": "0",
                    "maximum_value": "100",
                    "minimum_value_warning": "0",
                    "maximum_value_warning": "99",
                    "enabled": "a_trigger == 'percent'"
                },
                "percent_change_end":
                {
                    "label": "Extrusion % End",
                    "description": "Percentage of layer height to stop shifting extruder percentage.",
                    "unit": "%",
                    "type": "float",
                    "default_value": 100,
                    "minimum_value": "0",
                    "maximum_value": "100",
                    "minimum_value_warning": "1",
                    "maximum_value_warning": "100",
                    "enabled": "a_trigger == 'percent'"
                },
                "layer_change_start":
                {
                    "label": "Extrusion # Start",
                    "description": "Layer to start shifting extruder percentage.",
                    "unit": "#",
                    "type": "int",
                    "default_value": 0,
                    "minimum_value": "0",
                    "enabled": "a_trigger == 'layer_no'"
                },
                "layer_change_end":
                {
                    "label": "Extrusion # End",
                    "description": "Layer to stop changing extruder percentage. If layer is more then total layers the max layer will be chosen.",
                    "unit": "#",
                    "type": "int",
                    "default_value": 100000,
                    "minimum_value": "0",
                    "enabled": "a_trigger == 'layer_no'"
                },
                "b_trigger":
                {
                    "label": "Extruder Rotation",
                    "description": "The order in which the shift moves through the extruders.",
                    "type": "enum",
                    "options": {"normal":"Normal","reversed":"Reversed"},
                    "default_value": "normal"
                },
                "change_rate":
                {
                    "label": "Shift frequency",
                    "description": "How many layers until the color is shifted each time",
                    "unit": "#",
                    "type": "int",
                    "default_value": 4,
                    "minimum_value": "1",
                    "maximum_value": "1000",
                    "minimum_value_warning": "1",
                    "maximum_value_warning": "100"
                },
                "c_trigger":
                {
                    "label": "Shift Loop Type",
                    "description": "::Linear: Start with primary extruder finish with last extruder. ::Circular: Start with primary extruder shift through to last extruder and then shift back to primary extruder",
                    "type": "enum",
                    "options": {"1":"Linear","0":"Circular"},
                    "default_value": "linear"
                },
                "e_trigger":
                {
                    "label": "Modifier Type",
                    "description": "::Normal: Sets the shift to change gradually throughout the length of the layers within the clamp. ::Wood Texture: Sets one extruder at a random small percentage and adjusts change frequency by a random amount, simulating wood grain.",
                    "type": "enum",
                    "options": {"normal":"Normal","wood":"Wood Texture"},
                    "default_value": "normal"
                },
                "e1_trigger":
                {
                    "label": "Expert Controls",
                    "description": "Enable more controls. Some of which are for debugging purposes and may change or be removed later",
                    "type": "bool",
                    "default_value": false
                },
                 "initial_flow":
                {
                    "label": "Initial Main Flow",
                    "description": "Flow to initially set extruders must total up to 1.000  ::This allows the extruder to be set for any portion of the print before the actual shift begins.",
                    "unit": "0-1",
                    "type": "str",
                    "default_value": "1,0,0,0",
                    "enabled": "e1_trigger"
                },
                "final_flow":
                {
                    "label": "Final Main Flow",
                    "description": "Flow to initially set extruders must total up to 1.000  ::This allows the extruder to be set for any portion of the print after the affected layers.",
                    "unit": "0-1",
                    "type": "str",
                    "default_value": "0,0,0,1",
                    "enabled": "e1_trigger"
                },
                "flow_adjust":
                {
                    "label": "Ext Flow Adjust",
                    "description": "This compensates for under or over extrusion due to variances in filament",
                    "unit": "% + -",
                    "type": "float",
                    "default_value": 0,
                    "minimum_value": "-20",
                    "maximum_value": "20",
                    "minimum_value_warning": "-5",
                    "maximum_value_warning": "5",
                    "enabled": "e1_trigger"
                },
                "flow_min":
                {
                    "label": "Minimum Flow Allowed",
                    "description": "Clamp to keep both extruders flowing a small amount to prevent clogs. 0% to 5% Normally",
                    "unit": "%",
                    "type": "float",
                    "default_value": 0,
                    "minimum_value": "0",
                    "maximum_value": "10",
                    "minimum_value_warning": "0",
                    "maximum_value_warning": "5",
                    "enabled": "e1_trigger"
                }
            }
        }"""

    def execute(self, data: list):  # used to be data: list
        # Set user settings from cura
        clamp_choice = self.getSettingValueByKey("a_trigger")
        direction = self.getSettingValueByKey("b_trigger")

        # NEED TO PROVE THAT THESE ARE NEEDED OR WANTED
        # TRYING TO ACCOUNT FOR RETURNING TO ORIGINAL COLOR AND LEFTOVER LAYERS THAT DONT DIVIDE INTO EXTRUDERS
        loop = self.getSettingValueByKey("c_trigger")  # linear or circular (not currently enabled)

        modifier = self.getSettingValueByKey("e_trigger")  # normal, wood, beat
        change_rate = int(self.getSettingValueByKey("change_rate"))  # clamp within understandable range
        initial_flows = [float(initial_flow) for initial_flow in self.getSettingValueByKey("initial_flow").strip().split(',')]
        final_flows = [float(final_flow) for final_flow in self.getSettingValueByKey("final_flow").strip().split(',')]
        flow_adjust = float((self.getSettingValueByKey("flow_adjust")) / 100) + 1  # convert user input into multi
        qty_extruders = int(self.getSettingValueByKey("qty_extruders"))
        flow_min = float(self.getSettingValueByKey("flow_min") / 100) * qty_extruders
        flow_clamp_adjust = float(1 - (flow_min * qty_extruders))

        # INITIATE EXTRUDERS AS ZERO EXCEPT FIRST ONE
        base_input = [0] * qty_extruders
        base_input[0] = 1

        # CHECK ORDER OF VALUES ENTERED BY USER
        percent_start = float(self.getSettingValueByKey("percent_change_start") / 100)
        percent_end = float(self.getSettingValueByKey("percent_change_end") / 100)
        layer_start = int(self.getSettingValueByKey("layer_change_start"))
        layer_end = int(self.getSettingValueByKey("layer_change_end"))
        # REORDER IF BACKWARDS
        if percent_end < percent_start:
            percent_start, percent_end = percent_end, percent_start
        if layer_end < layer_start:
            layer_start, layer_end = layer_end, layer_start

        current_position = 0
        index = 0

        # Iterate through the layers
        for active_layer in data:

            # Remove the whitespace and split the gcode into lines
            lines = active_layer.strip().split("\n")

            modified_gcode = ""
            for line in lines:
                if ";LAYER_COUNT:" in line:
                    # FINDING THE ACTUAL AFFECTED LAYERS
                    total_layers = float(line[(line.index(':') + 1): len(line)])

                    # Calculate positions based on total_layers
                    if clamp_choice == 'percent':
                        start_position = int(int(total_layers) * float(percent_start))
                        current_position = start_position
                        end_position = int(int(total_layers) * float(percent_end))
                    if clamp_choice == 'layer_no':
                        start_position = int(clamp(layer_start, 0, total_layers))
                        current_position = start_position
                        end_position = int(clamp(layer_end, 0, total_layers))

                    # how many layers are affected
                    adjusted_layers = end_position - start_position

                    # Make sure the change_rate doesnt sit outside of allowed values
                    change_rate = int(clamp(change_rate, 1, adjusted_layers))

                    # SETTING THE FLOWS SET BY USER IN EXPERT CONTROLS
                    # make sure there are as many values set as extruders selected
                    while len(initial_flows) < len(base_input):
                        initial_flows.append(float(0))
                    # Make sure totals add up to 1 no more no less and make sure extras are disregarded
                    check_total = 0
                    i = 0
                    for ext in base_input:  # Disregard extras
                        initial_flows[i] = clamp(initial_flows[i], 0, 1)  # Clamp to value range

                        if initial_flows[i] + check_total < 1:  # Keep within total of 1
                            base_input[i] = initial_flows[i]
                        else:
                            base_input[i] = 1 - check_total
                        check_total += base_input[i]
                        i += 1



                    # ASSIGN THE INITIAL VALUES TO A SINGLE GCODE LINE
                    ext_gcode_list = [''] * qty_extruders
                    gcode_index = 0
                    for code in ext_gcode_list:
                        ext_gcode_list[ext_gcode_list.index(code)] = format(base_input[gcode_index] * flow_adjust * flow_clamp_adjust + flow_min, '.3f')
                        gcode_index += 1

                    # change direction of shift if set by user
                    if direction == 'normal':
                        modified_gcode = initiate_extruder(line, *ext_gcode_list)
                    else:
                        modified_gcode = initiate_extruder(line, *ext_gcode_list[::-1])

                    # INITIATE VALUES USED THROUGH THE AFFECTED LAYERS
                    changes_total = int(adjusted_layers/change_rate)  # how many times are we allowed to adjust
                    changes_per_extruder = int(changes_total/(qty_extruders-1))
                    current_extruder = 0
                    next_extruder = 1
                    ext_fraction = changes_per_extruder

                # CHANGES MADE TO LAYERS THROUGH THE AFFECTED LAYERS
                elif ";LAYER:" + str(current_position) in line and int(current_position) < int(end_position):

                    # ADJUST EXTRUDER RATES FOR NEXT AFFECTED LAYER 2 PARTS (should be simplified)
                    # Part 1 adjust rate by fraction to avoid rounding errors from addition
                    if modifier == 'normal':
                        base_input[current_extruder], base_input[next_extruder] = standard_shift(ext_fraction, changes_per_extruder)
                    elif modifier == 'wood':
                        base_input[current_extruder], base_input[next_extruder] = wood_shift(0.05, 0.25)

                    # Part 2 initialize what percentage to reach wrap extruders back to start if out of range
                    ext_fraction -= 1
                    if ext_fraction < 0:
                        current_extruder += 1
                        next_extruder += 1
                        ext_fraction = changes_per_extruder-1  # -1 to avoid duplicate 0:1:0
                    if next_extruder == qty_extruders:
                        next_extruder = 0

                    # lAST TWEAK ADJUST THE EXTRUDER VALUES BY FLOW ADJUSTMENTS AND LIMITS
                    ext_gcode_list = [''] * qty_extruders
                    gcode_index = 0
                    for ext in ext_gcode_list:
                        ext_gcode_list[ext_gcode_list.index(ext)] = format(base_input[gcode_index] * flow_adjust * flow_clamp_adjust + flow_min, '.3f')
                        gcode_index += 1

                    # TURN THE EXTRUDER VALUES INTO A SINGLE GCODE LINE
                    if direction == 'normal':
                        modified_gcode = adjust_extruder_rate(line, *ext_gcode_list)
                    else:
                        modified_gcode = adjust_extruder_rate(line, *ext_gcode_list[::-1])

                    # DEBUGGING ONLY OUTPUTS TO GCODE FILE
                    #modified_gcode += print_debug(ext_fraction)
                    #modified_gcode += print_debug(current_extruder)
                    #modified_gcode += print_debug(next_extruder)

                    # CHANGE THE POSITION FOR NEXT RUN
                    if modifier == 'normal':
                        current_position += standard_rate(change_rate)
                    elif modifier == 'wood':
                        current_position += wood_rate(change_rate, change_rate*2)

                # CHANGES MADE AFTER THE LAST AFFECTED LAYER TO COMPLETE THE PRINT WITH
                elif ";LAYER:" + str(current_position) in line and int(current_position) == int(end_position):
                    modified_gcode += line + "\n"
                # LEAVE ALL OTHER LINES ALONE SINCE THEY ARE NOT NEW LAYERS
                else:
                    modified_gcode += line + "\n"

            # REPLACE THE DATA
            data[index] = modified_gcode
            index += 1
        return data


# MODIFIERS FOR DIFFERENT EFFECTS ON EXTRUDERS
# SHIFTS AFFECT EXTRUDER RATIOS AND RETURN BOTH VALUES TOGETHER (X AND 1-X)
def standard_shift(numerator, denominator):
    return numerator/denominator, (denominator-numerator)/denominator


def wood_shift(min_percentage, max_percentage):
    random_value = random.uniform(min_percentage, max_percentage)
    return random_value, 1-random_value


# RATES AFFECT FREQUENCY OF SHIFTS AND RETURN ONE VALUE
def standard_rate(rate):
    return rate


def wood_rate(min_percentage, max_percentage):
    random_value = int(random.uniform(min_percentage, max_percentage))
    return random_value

