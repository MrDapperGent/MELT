from ..Script import Script
import math
import random

# current bugs
# running two sets of post processing fails the second post process, also does this with some other plugins that come with cura so may be caused by cura
# need description of project
# need proofreading and better explanations from feedback

# New Updates
# added support for multiple extruders
# initial flow Multiple extruder support

# Goals
# need to make two things more modular or flexible so adding options in the future is more readable
# 1. base_input - allowing it to be easier to add a woodtexture modifier and heart beat modifier
# 2. change_rate - allowing random distances between changes

# Credits for contribution
# gargansa, bass4aj

# Naming Credits
# Scott Witchaski - std overflow



# convenience function for gargansa's coding familiarity
def clamp(value, minimum, maximum):
    return max(minimum, min(value, maximum))

# function to compile the initial setup into a string
def initiate_extruder(existing_gcode, *ext):
    qty_ext = len(ext)
    setup_line = ";Modified by ColorShift" + "\n"
    setup_line += existing_gcode + " Modified:\n"
    # Define tool
    for i in range(0, qty_ext):
        if i == 0:
            setup_line += "M563 P0 D" + str(i)
        else:
            setup_line += ":" + str(i)
    setup_line += " H1 ;Define tool 0" + "\n"
    # Position tool
    for i in range(0, qty_ext):
        setup_line += "M563 P2 D" + str(i) + " H" + str(i + 1)
        setup_line += " ;Position " + str(i + 1) + " tool" + "\n"
    # Set axis offsets
    setup_line += "G10 P0 X0 Y0 Z0 ;Set tool 0 axis offsets" + "\n"
    # Activate tool
    setup_line += "G10 P2 R120 S220 ;Set initial tool 0 active" + "\n"
    # Set initial extrusion rate
    setup_line += adjust_extruder_rate(";Initial Extruder Rate", *ext)
    # Initiate the tool
    setup_line += "M568 P0 S1 ;Turn on tool mixing for the extruder" + "\n"
    return setup_line


# function to compile extruder info into a string
def adjust_extruder_rate(existing_gcode, *ext):
    i = 0
    for item in ext:
        if i == 0:
            setup_line = existing_gcode + " ;Modified: \nM567 P0 E" + str(item)
        else:
            setup_line += ":" + str(item)
        i += 1
    setup_line += "\n"
    return setup_line


class ColorShift(Script):
    version = "2.0.0"

    def __init__(self):
        super().__init__()

    def getSettingDataString(self):
        return """{
            "name":"ColorShift",
            "key":"ColorShift",
            "metadata": {},
            "version": 2,
            "settings":
            {
                "qty_extruders":
                {
                    "label": "Number of extruders",
                    "description": "How many extruders in mixing nozzle.",
                    "type": "enum",
                    "options": {"2":"Two","3":"Three","4":"Four"},
                    "default_value": "2"
                },
                "a_trigger":
                {
                    "label": "Shifting Clamp Type",
                    "description": "Begin and end shifting at percentage or layer.",
                    "type": "enum",
                    "options": {"percent":"Percentage","layer_no":"Layer No."},
                    "default_value": "percent"
                },
                "percent_change_start":
                {
                    "label": "Extrusion % Start",
                    "description": "Percentage of layer height to start shifting extruder percentage.",
                    "unit": "%",
                    "type": "float",
                    "default_value": 0,
                    "minimum_value": "0",
                    "maximum_value": "100",
                    "minimum_value_warning": "0",
                    "maximum_value_warning": "99",
                    "enabled": "a_trigger == 'percent'"
                },
                "percent_change_end":
                {
                    "label": "Extrusion % End",
                    "description": "Percentage of layer height to stop shifting extruder percentage.",
                    "unit": "%",
                    "type": "float",
                    "default_value": 100,
                    "minimum_value": "0",
                    "maximum_value": "100",
                    "minimum_value_warning": "1",
                    "maximum_value_warning": "100",
                    "enabled": "a_trigger == 'percent'"
                },
                "layer_change_start":
                {
                    "label": "Extrusion # Start",
                    "description": "Layer to start shifting extruder percentage.",
                    "unit": "#",
                    "type": "int",
                    "default_value": 0,
                    "minimum_value": "0",
                    "enabled": "a_trigger == 'layer_no'"
                },
                "layer_change_end":
                {
                    "label": "Extrusion # End",
                    "description": "Layer to stop changing extruder percentage. If layer is more then total layers the max layer will be chosen.",
                    "unit": "#",
                    "type": "int",
                    "default_value": 100000,
                    "minimum_value": "0",
                    "enabled": "a_trigger == 'layer_no'"
                },
                "b_trigger":
                {
                    "label": "Extruder Rotation",
                    "description": "The order in which the shift moves through the extruders.",
                    "type": "enum",
                    "options": {"normal":"Normal","reversed":"Reversed"},
                    "default_value": "normal"
                },
                "change_rate":
                {
                    "label": "Shift frequency",
                    "description": "How many layers until the color is shifted each time",
                    "unit": "#",
                    "type": "int",
                    "default_value": 4,
                    "minimum_value": "1",
                    "maximum_value": "1000",
                    "minimum_value_warning": "1",
                    "maximum_value_warning": "100"
                },
                "c_trigger":
                {
                    "label": "Shift Loop Type",
                    "description": "::Linear: Start with primary extruder finish with last extruder. ::Circular: Start with primary extruder shift through to last extruder and then shift back to primary extruder",
                    "type": "enum",
                    "options": {"linear":"Linear","circular":"Circular"},
                    "default_value": "linear"
                },
                "d_trigger":
                {
                    "label": "Overflow Type",
                    "description": "Since the number of adjustments may not always be equally divided by the number of extruders this decides what to do with the remainder.  ::Standard Overflow: Any extra continues the shift pattern, circular continues to the next extruder, linear adds to the last shift.  ::Extend Flow: Lengthen the length of a chosen extruder.",
                    "type": "enum",
                    "options": {"standard":"Standard Overflow","extended":"Extended Overflow"},
                    "default_value": "standard"
                },
                "e1_trigger":
                {
                    "label": "Expert Controls",
                    "description": "Enable more controls. Some of which are for debugging purposes and may change or be removed later",
                    "type": "bool",
                    "default_value": false
                },
                 "initial_flow":
                {
                    "label": "Initial Main Flow",
                    "description": "Flow to initially set extruders must total up to 1.000  ::This allows the extruder to be set for any portion of the print before the actual shift begins.",
                    "unit": "0-1",
                    "type": "str",
                    "default_value": "1,0,0,0",
                    "enabled": "e1_trigger"
                },
                "flow_adjust":
                {
                    "label": "Ext Flow Adjust",
                    "description": "This compensates for under or over extrusion due to variances in filament",
                    "unit": "% + -",
                    "type": "float",
                    "default_value": 0,
                    "minimum_value": "-20",
                    "maximum_value": "20",
                    "minimum_value_warning": "-5",
                    "maximum_value_warning": "5",
                    "enabled": "e1_trigger"
                },
                "flow_min":
                {
                    "label": "Minimum Flow Allowed",
                    "description": "Clamp to keep both extruders flowing a small amount to prevent clogs. 0% to 5% Normally",
                    "unit": "%",
                    "type": "float",
                    "default_value": 0,
                    "minimum_value": "0",
                    "maximum_value": "10",
                    "minimum_value_warning": "0",
                    "maximum_value_warning": "5",
                    "enabled": "e1_trigger"
                }
            }
        }"""

    def execute(self, data: list):  # used to be data: list
        # Set user settings from cura
        clamp_choice = self.getSettingValueByKey("a_trigger")
        direction = self.getSettingValueByKey("b_trigger")
        loop = self.getSettingValueByKey("c_trigger")  # linear or circular
        overflow = self.getSettingValueByKey("d_trigger")  # standard or extended

        change_rate = int(self.getSettingValueByKey("change_rate"))  # clamp within understandable range

        initial_flows = [float(initial_flow) for initial_flow in self.getSettingValueByKey("initial_flow").strip().split(',')]

        flow_adjust = float((self.getSettingValueByKey("flow_adjust")) / 100) + 1  # convert user input into multi
        qty_extruders = int(self.getSettingValueByKey("qty_extruders"))
        flow_min = float(self.getSettingValueByKey("flow_min") / 100) * qty_extruders
        flow_clamp_adjust = float(1 - (flow_min * qty_extruders))
        base_input = [0] * qty_extruders
        base_input[0] = 1
        # Make sure user settings are in order after loading
        percent_start = float(self.getSettingValueByKey("percent_change_start") / 100)
        percent_end = float(self.getSettingValueByKey("percent_change_end") / 100)
        layer_start = int(self.getSettingValueByKey("layer_change_start"))
        layer_end = int(self.getSettingValueByKey("layer_change_end"))
        if percent_end < percent_start:
            percent_start, percent_end = percent_end, percent_start
        if layer_end < layer_start:
            layer_start, layer_end = layer_end, layer_start

        current_position = 0
        index = 0

        # Iterate through the layers
        for active_layer in data:

            # Remove the whitespace and split the gcode into lines
            lines = active_layer.strip().split("\n")

            modified_gcode = ""
            for line in lines:
                if ";LAYER_COUNT:" in line:
                    # FINDING THE ACTUAL AFFECTED LAYERS
                    # Find the actual total layers in the gcode
                    total_layers = float(line[(line.index(':') + 1): len(line)])
                    # Calculate positions based on total_layers
                    if clamp_choice == 'percent':
                        start_position = int(int(total_layers) * float(percent_start))
                        current_position = start_position
                        end_position = int(int(total_layers) * float(percent_end))
                    if clamp_choice == 'layer_no':
                        start_position = int(clamp(layer_start, 0, total_layers))
                        current_position = start_position
                        end_position = int(clamp(layer_end, 0, total_layers))
                    # Find the layers that are actually affected or the ones within the clamp set by user
                    adjusted_layers = end_position - start_position
                    # Make sure the change_rate doesnt sit outside of allowed values
                    change_rate = int(clamp(change_rate, 1, adjusted_layers))

                    # SETTING THE FLOWS SET BY USER IN EXPERT CONTROLS (needs simplified)
                    # Need to make sure total of values set for extruder add up to 1 (needs written)
                    # Account for user defining less then actual number of extruders
                    while len(initial_flows) < qty_extruders:
                        initial_flows.append(0)
                    # Assign initial flow set by user in expert controls (exclude extra extruders set by user)
                    flow_location = 0
                    for ext in base_input:
                        base_input[flow_location] = initial_flows[flow_location]
                        flow_location += 1

                    # ASSIGN THE INITIAL VALUES TO A GCODE LINE
                    ext_gcode_list = [''] * qty_extruders
                    gcode_index = 0
                    for code in ext_gcode_list:
                        ext_gcode_list[ext_gcode_list.index(code)] = format(base_input[gcode_index] * flow_adjust * flow_clamp_adjust + flow_min, '.3f')
                        gcode_index += 1
                    # change direction of shift if set by user
                    if direction == 'normal':
                        modified_gcode = adjust_extruder_rate(line, *ext_gcode_list)
                    else:
                        modified_gcode = adjust_extruder_rate(line, *ext_gcode_list[::-1])

                    # decide how much the extruder should change through the print
                    current_extruder = 0
                    next_extruder = 1
                    changes_total = int((adjusted_layers-change_rate)/change_rate)  # how many times are we allowed to adjust
                    changes_per_extruder = int((changes_total/(qty_extruders-1))+0.5)  # how many times for each extruder are we allowed to adjust

                    full_bar = int((changes_total/(qty_extruders-1))+0.5)
                    empty_bar = 0

                # Find where to add for affected layers
                elif ";LAYER:" + str(current_position) in line and int(current_position) < int(end_position):

                    # turning the rate into a modified percentage based on other factors
                    ext_gcode_list = [''] * qty_extruders
                    gcode_index = 0
                    for ext in ext_gcode_list:
                        ext_gcode_list[ext_gcode_list.index(ext)] = format(base_input[gcode_index] * flow_adjust * flow_clamp_adjust + flow_min, '.3f')
                        gcode_index += 1

                    # send the rate to be turned into a string
                    if direction == 'normal':
                        modified_gcode = adjust_extruder_rate(line, *ext_gcode_list)
                    else:
                        modified_gcode = adjust_extruder_rate(line, *ext_gcode_list[::-1])

                    # Setting up the extruder rates afterwards so first one is in correct spot
                    if full_bar <= 0:
                        current_extruder += 1
                        next_extruder += 1
                        full_bar = int((changes_total/(qty_extruders-1))+0.5)
                        empty_bar = 0
                        if next_extruder >= qty_extruders:
                            next_extruder = 0

                    for ext in base_input:
                        if base_input.index(ext) == current_extruder:
                            full_bar -= 1
                            base_input[base_input.index(ext)] = full_bar/changes_per_extruder
                        elif base_input.index(ext) == next_extruder:
                            empty_bar += 1
                            base_input[base_input.index(ext)] = empty_bar/changes_per_extruder

                    current_position += change_rate

                # If no conditions apply leave the code alone
                else:
                    modified_gcode += line + "\n"

            # Replace the data
            data[index] = modified_gcode
            index += 1
        return data

