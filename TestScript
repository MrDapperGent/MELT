from ..Script import Script


class TestScript(Script):
    version = "1.0.0"
    def __init__(self):
        super().__init__()

    def getSettingDataString(self):
        return """{
                    "name":"TestScript """ + self.version + """ (Unreleased)",
                    "key":"TestScript",
                    "metadata": {},
                    "version": 2,
                    "settings":
                    {
                        "dropDown":
                        {
                            "label": "Option List",
                            "description": "Describe what kind of options are available.",
                            "type": "enum",
                            "options": {"one":"Option One","two":"Option Two"},
                            "default_value": "option_var"
                        },
                        "boolean":
                        {
                            "label": "Boolean",
                            "description": "True or False",
                            "type": "bool",
                            "default_value": false
                        },
                        "integer":
                        {
                            "label": "Integer",
                            "description": "Positive and negative Integers",
                            "unit": "#",
                            "type": "int",
                            "default_value": 5,
                            "minimum_value_warning": "5",
                            "maximum_value_warning": "95",
                            "minimum_value": "0",
                            "maximum_value": "100"
                        },
                        "float":
                        {
                            "label": "Float",
                            "description": "Positive and negative decimal Integers",
                            "unit": "%",
                            "type": "float",
                            "default_value": 0.5,
                            "minimum_value_warning": "0.01",
                            "maximum_value_warning": "0.99",
                            "minimum_value": "-1",
                            "maximum_value": "1"
                        },
                        "switch":
                        {
                            "label": "Hidden Trigger",
                            "description": "Show More Controls",
                            "type": "bool",
                            "default_value": false
                        },
                        "hidden_value":
                        {
                            "label": "Expert Control",
                            "description": "Only shows if a_trigger (Expert Controls) is enabled.",
                            "unit": "#",
                            "type": "int",
                            "enabled": "switch"
                        },
                        "switch2":
                        {
                            "label": "Multiple options",
                            "description": "Show More Controls",
                            "type": "enum",
                            "options": {"one":"One","two":"Two","three":"Three"},
                            "default_value": "one"
                        },
                        "value_a":
                        {
                            "label": "Value A",
                            "description": "Shows if one or three.",
                            "unit": "#",
                            "type": "int",
                            "enabled": "switch2 == 'one' or switch2 == 'two' or switch2 == 'three'"
                        },
                        "value_b":
                        {
                            "label": "Value B",
                            "description": "Shows if two.",
                            "unit": "#",
                            "type": "int",
                            "enabled": "switch2 == 'two' or switch2 == 'three'"
                        },
                        "value_c":
                        {
                            "label": "Value C",
                            "description": "Shows if one or two or three.",
                            "unit": "#",
                            "type": "int",
                            "enabled": "switch2 == 'three'"
                        }
            }
        }"""

# Modifying the GCodes
    def execute(self, data: list):

        # Grab the settings set by user
        change_rate = int(self.getSettingValueByKey("integer"))
        index = 0
        current_position = 0

        # Iterate through the file by layers
        for active_layer in data:
            lines = active_layer.strip().split("\n")

            # Iterate through the layers by gcodes
            modified_gcode = ""
            for line in lines:

                # Look for the line that contains ;LAYER_COUNT:
                if ";LAYER_COUNT:" in line:

                    # grab the value in the same line as ;LAYER_COUNT:
                    total_layers = float(line[(line.index(':') + 1): len(line)])

                    # Add info after the line we are on
                    modified_gcode += line + "\n;Info to add to the start of Gcode.\n"

                # Look for the line that contains ;LAYER: + current_position
                elif ";LAYER:" + str(current_position) in line:

                    # Add info after the line we are on
                    modified_gcode += line + "\n;Current Position Data: " + str(current_position/total_layers) + "\n"

                    # Decide what line we are going to look for next
                    current_position += change_rate

                # Make sure to not skip all the lines we don't use
                else:
                    modified_gcode += line + "\n"

            # Overwrite each line with the new data
            data[index] = modified_gcode
            index += 1
        return data
